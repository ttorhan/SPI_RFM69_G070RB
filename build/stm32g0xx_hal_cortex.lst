ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g0xx_hal_cortex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_NVIC_SetPriority
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	HAL_NVIC_SetPriority:
  25              	.LVL0:
  26              	.LFB310:
  27              		.file 1 "Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c"
   1:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @file    stm32g0xx_hal_cortex.c
   4:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *           + Initialization and Configuration functions
   9:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *           + Peripheral Control functions
  10:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  11:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   @verbatim
  12:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
  13:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
  15:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
  16:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  17:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     ===========================================================
  18:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
  19:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  20:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     The Cortex M0+ exceptions are managed by CMSIS functions.
  21:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels.
  22:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****              The priority can be 0..3.
  23:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  24:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  25:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         -@- Priority Order:
  26:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****             (#@) Lowest priority.
  27:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).
  28:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  29:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority()
  30:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  31:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ()
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 2


  32:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  33:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       -@-  Negative value of IRQn_Type are not allowed.
  34:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  35:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  36:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     ========================================================
  37:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
  38:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  39:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  40:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  41:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        is a CMSIS function that:
  42:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  43:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
  44:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  45:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  46:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  47:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  48:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  49:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  50:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  51:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
  52:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        inside the stm32g0xx_hal_cortex.h file.
  53:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  54:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  55:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  56:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  57:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  58:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  59:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  60:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  61:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  62:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  63:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  64:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   @endverbatim
  65:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ******************************************************************************
  66:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @attention
  67:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  68:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * Copyright (c) 2018 STMicroelectronics.
  69:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * All rights reserved.
  70:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  71:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * This software is licensed under terms that can be found in the LICENSE file in
  72:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * the root directory of this software component.
  73:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  74:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *
  75:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ******************************************************************************
  76:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
  77:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  78:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  79:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** #include "stm32g0xx_hal.h"
  80:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  81:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup STM32G0xx_HAL_Driver
  82:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
  83:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
  84:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  85:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX
  86:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
  87:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
  88:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 3


  89:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
  90:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  91:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
  92:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
  93:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
  94:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
  95:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Private function prototypes -----------------------------------------------*/
  96:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
  97:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
  98:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions
  99:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
 100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group1
 104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions
 105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *
 106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @verbatim
 107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ##### Initialization and Configuration functions #####
 109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
 111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       Systick functionalities
 113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @endverbatim
 115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
 116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief Sets the priority of an interrupt.
 120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param IRQn External interrupt number .
 121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32g0xx.h file)
 123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param PreemptPriority The preemption priority for the IRQn channel.
 124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority
 126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param SubPriority the subpriority level for the IRQ channel.
 127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
 128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0+ based products.
 129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
  28              		.loc 1 132 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 132 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
 133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 4


 134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   UNUSED(SubPriority);
  40              		.loc 1 134 3 is_stmt 1 view .LVU2
 135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  41              		.loc 1 137 3 view .LVU3
 138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn, PreemptPriority);
  42              		.loc 1 138 3 view .LVU4
  43              	.LVL1:
  44              	.LBB34:
  45              	.LBI34:
  46              		.file 2 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.7
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     13. March 2019
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 5


  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_FP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 6


 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 7


 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 8


 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 9


 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 10


 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 11


 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 12


 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 13


 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 14


 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 15


 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 16


 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 17


 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 747:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 748:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 749:Drivers/CMSIS/Include/core_cm0plus.h **** }
 750:Drivers/CMSIS/Include/core_cm0plus.h **** 
 751:Drivers/CMSIS/Include/core_cm0plus.h **** 
 752:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 758:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 759:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 760:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 761:Drivers/CMSIS/Include/core_cm0plus.h **** {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 764:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 766:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 768:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 769:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 770:Drivers/CMSIS/Include/core_cm0plus.h **** }
 771:Drivers/CMSIS/Include/core_cm0plus.h **** 
 772:Drivers/CMSIS/Include/core_cm0plus.h **** 
 773:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 777:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 778:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 779:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 780:Drivers/CMSIS/Include/core_cm0plus.h **** {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 782:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 784:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 785:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 786:Drivers/CMSIS/Include/core_cm0plus.h ****   }
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 18


 787:Drivers/CMSIS/Include/core_cm0plus.h **** }
 788:Drivers/CMSIS/Include/core_cm0plus.h **** 
 789:Drivers/CMSIS/Include/core_cm0plus.h **** 
 790:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 796:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 797:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 798:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 799:Drivers/CMSIS/Include/core_cm0plus.h **** {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 802:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 804:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 806:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 807:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 808:Drivers/CMSIS/Include/core_cm0plus.h **** }
 809:Drivers/CMSIS/Include/core_cm0plus.h **** 
 810:Drivers/CMSIS/Include/core_cm0plus.h **** 
 811:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 815:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 816:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 817:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 818:Drivers/CMSIS/Include/core_cm0plus.h **** {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 821:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 822:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 823:Drivers/CMSIS/Include/core_cm0plus.h **** }
 824:Drivers/CMSIS/Include/core_cm0plus.h **** 
 825:Drivers/CMSIS/Include/core_cm0plus.h **** 
 826:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 830:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 831:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 832:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 833:Drivers/CMSIS/Include/core_cm0plus.h **** {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 836:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 837:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 838:Drivers/CMSIS/Include/core_cm0plus.h **** }
 839:Drivers/CMSIS/Include/core_cm0plus.h **** 
 840:Drivers/CMSIS/Include/core_cm0plus.h **** 
 841:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 842:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 843:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 19


 844:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 845:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 848:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 849:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 850:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
  47              		.loc 2 850 22 view .LVU5
  48              	.LBB35:
 851:Drivers/CMSIS/Include/core_cm0plus.h **** {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
  49              		.loc 2 852 3 view .LVU6
  50              		.loc 2 852 6 is_stmt 0 view .LVU7
  51 0002 0028     		cmp	r0, #0
  52 0004 11DB     		blt	.L2
 853:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 854:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  53              		.loc 2 854 5 is_stmt 1 view .LVU8
  54              		.loc 2 854 53 is_stmt 0 view .LVU9
  55 0006 8308     		lsrs	r3, r0, #2
  56              		.loc 2 854 52 view .LVU10
  57 0008 134E     		ldr	r6, .L4
  58 000a C033     		adds	r3, r3, #192
  59 000c 9B00     		lsls	r3, r3, #2
  60 000e 9D59     		ldr	r5, [r3, r6]
  61              		.loc 2 854 83 view .LVU11
  62 0010 0324     		movs	r4, #3
  63 0012 2040     		ands	r0, r4
  64              	.LVL2:
  65              		.loc 2 854 83 view .LVU12
  66 0014 C000     		lsls	r0, r0, #3
  67              		.loc 2 854 80 view .LVU13
  68 0016 FF22     		movs	r2, #255
  69              	.LVL3:
  70              		.loc 2 854 80 view .LVU14
  71 0018 1400     		movs	r4, r2
  72 001a 8440     		lsls	r4, r4, r0
  73              		.loc 2 854 33 view .LVU15
  74 001c A543     		bics	r5, r4
 855:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  75              		.loc 2 855 20 view .LVU16
  76 001e 8901     		lsls	r1, r1, #6
  77              	.LVL4:
  78              		.loc 2 855 48 view .LVU17
  79 0020 0A40     		ands	r2, r1
  80              		.loc 2 855 68 view .LVU18
  81 0022 8240     		lsls	r2, r2, r0
 854:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  82              		.loc 2 854 102 view .LVU19
  83 0024 2A43     		orrs	r2, r5
 854:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  84              		.loc 2 854 30 view .LVU20
  85 0026 9A51     		str	r2, [r3, r6]
  86              	.LVL5:
  87              	.L1:
 854:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  88              		.loc 2 854 30 view .LVU21
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 20


  89              	.LBE35:
  90              	.LBE34:
 139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
  91              		.loc 1 139 1 view .LVU22
  92              		@ sp needed
  93 0028 70BD     		pop	{r4, r5, r6, pc}
  94              	.LVL6:
  95              	.L2:
  96              	.LBB37:
  97              	.LBB36:
 856:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 857:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 859:Drivers/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
  98              		.loc 2 859 5 is_stmt 1 view .LVU23
  99              		.loc 2 859 53 is_stmt 0 view .LVU24
 100 002a 0F23     		movs	r3, #15
 101 002c 0340     		ands	r3, r0
 102 002e 083B     		subs	r3, r3, #8
 103 0030 9B08     		lsrs	r3, r3, #2
 104              		.loc 2 859 52 view .LVU25
 105 0032 0633     		adds	r3, r3, #6
 106 0034 9B00     		lsls	r3, r3, #2
 107 0036 094A     		ldr	r2, .L4+4
 108              	.LVL7:
 109              		.loc 2 859 52 view .LVU26
 110 0038 9446     		mov	ip, r2
 111 003a 6344     		add	r3, r3, ip
 112 003c 5C68     		ldr	r4, [r3, #4]
 113              		.loc 2 859 83 view .LVU27
 114 003e 0322     		movs	r2, #3
 115 0040 1040     		ands	r0, r2
 116              	.LVL8:
 117              		.loc 2 859 83 view .LVU28
 118 0042 C000     		lsls	r0, r0, #3
 119              		.loc 2 859 80 view .LVU29
 120 0044 FC32     		adds	r2, r2, #252
 121 0046 1500     		movs	r5, r2
 122 0048 8540     		lsls	r5, r5, r0
 123              		.loc 2 859 33 view .LVU30
 124 004a AC43     		bics	r4, r5
 860:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 125              		.loc 2 860 20 view .LVU31
 126 004c 8901     		lsls	r1, r1, #6
 127              	.LVL9:
 128              		.loc 2 860 48 view .LVU32
 129 004e 0A40     		ands	r2, r1
 130              		.loc 2 860 68 view .LVU33
 131 0050 8240     		lsls	r2, r2, r0
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 132              		.loc 2 859 102 view .LVU34
 133 0052 2243     		orrs	r2, r4
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 134              		.loc 2 859 30 view .LVU35
 135 0054 5A60     		str	r2, [r3, #4]
 136              	.LVL10:
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 21


 137              		.loc 2 859 30 view .LVU36
 138              	.LBE36:
 139              	.LBE37:
 140              		.loc 1 139 1 view .LVU37
 141 0056 E7E7     		b	.L1
 142              	.L5:
 143              		.align	2
 144              	.L4:
 145 0058 00E100E0 		.word	-536813312
 146 005c 00ED00E0 		.word	-536810240
 147              		.cfi_endproc
 148              	.LFE310:
 150              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 151              		.align	1
 152              		.global	HAL_NVIC_EnableIRQ
 153              		.syntax unified
 154              		.code	16
 155              		.thumb_func
 157              	HAL_NVIC_EnableIRQ:
 158              	.LVL11:
 159              	.LFB311:
 140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Enable a device specific interrupt in the NVIC interrupt controller.
 143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 160              		.loc 1 149 1 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 165              		.loc 1 151 3 view .LVU39
 152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Enable interrupt */
 154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 166              		.loc 1 154 3 view .LVU40
 167              	.LBB38:
 168              	.LBI38:
 741:Drivers/CMSIS/Include/core_cm0plus.h **** {
 169              		.loc 2 741 22 view .LVU41
 170              	.LBB39:
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 171              		.loc 2 743 3 view .LVU42
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 172              		.loc 2 743 6 is_stmt 0 view .LVU43
 173 0000 0028     		cmp	r0, #0
 174 0002 05DB     		blt	.L6
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 175              		.loc 2 745 5 is_stmt 1 view .LVU44
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 22


 176              		.loc 2 746 5 view .LVU45
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 177              		.loc 2 746 58 is_stmt 0 view .LVU46
 178 0004 1F23     		movs	r3, #31
 179 0006 1840     		ands	r0, r3
 180              	.LVL12:
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 181              		.loc 2 746 22 view .LVU47
 182 0008 1E3B     		subs	r3, r3, #30
 183 000a 8340     		lsls	r3, r3, r0
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 184              		.loc 2 746 20 view .LVU48
 185 000c 014A     		ldr	r2, .L8
 186 000e 1360     		str	r3, [r2]
 747:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 187              		.loc 2 747 5 is_stmt 1 view .LVU49
 188              	.LVL13:
 189              	.L6:
 747:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 190              		.loc 2 747 5 is_stmt 0 view .LVU50
 191              	.LBE39:
 192              	.LBE38:
 155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 193              		.loc 1 155 1 view .LVU51
 194              		@ sp needed
 195 0010 7047     		bx	lr
 196              	.L9:
 197 0012 C046     		.align	2
 198              	.L8:
 199 0014 00E100E0 		.word	-536813312
 200              		.cfi_endproc
 201              	.LFE311:
 203              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 204              		.align	1
 205              		.global	HAL_NVIC_DisableIRQ
 206              		.syntax unified
 207              		.code	16
 208              		.thumb_func
 210              	HAL_NVIC_DisableIRQ:
 211              	.LVL14:
 212              	.LFB312:
 156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Disable a device specific interrupt in the NVIC interrupt controller.
 159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 213              		.loc 1 165 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 23


 167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 218              		.loc 1 167 3 view .LVU53
 168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Disable interrupt */
 170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 219              		.loc 1 170 3 view .LVU54
 220              	.LBB40:
 221              	.LBI40:
 779:Drivers/CMSIS/Include/core_cm0plus.h **** {
 222              		.loc 2 779 22 view .LVU55
 223              	.LBB41:
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 224              		.loc 2 781 3 view .LVU56
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 225              		.loc 2 781 6 is_stmt 0 view .LVU57
 226 0000 0028     		cmp	r0, #0
 227 0002 0ADB     		blt	.L10
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 228              		.loc 2 783 5 is_stmt 1 view .LVU58
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 229              		.loc 2 783 58 is_stmt 0 view .LVU59
 230 0004 1F23     		movs	r3, #31
 231 0006 1840     		ands	r0, r3
 232              	.LVL15:
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 233              		.loc 2 783 22 view .LVU60
 234 0008 1E3B     		subs	r3, r3, #30
 235 000a 8340     		lsls	r3, r3, r0
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 236              		.loc 2 783 20 view .LVU61
 237 000c 0349     		ldr	r1, .L12
 238 000e 8022     		movs	r2, #128
 239 0010 8B50     		str	r3, [r1, r2]
 784:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 240              		.loc 2 784 5 is_stmt 1 view .LVU62
 241              	.LBB42:
 242              	.LBI42:
 243              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 24


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 25


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 26


 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 27


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 28


 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 29


 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 30


 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 31


 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 32


 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 33


 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 34


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 35


 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 36


 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 37


 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 38


 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 39


 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 40


 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 244              		.loc 3 944 27 view .LVU63
 245              	.LBB43:
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 246              		.loc 3 946 3 view .LVU64
 247              		.syntax divided
 248              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 249 0012 BFF34F8F 		dsb 0xF
 250              	@ 0 "" 2
 251              		.thumb
 252              		.syntax unified
 253              	.LBE43:
 254              	.LBE42:
 785:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 255              		.loc 2 785 5 view .LVU65
 256              	.LBB44:
 257              	.LBI44:
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 258              		.loc 3 933 27 view .LVU66
 259              	.LBB45:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 260              		.loc 3 935 3 view .LVU67
 261              		.syntax divided
 262              	@ 935 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 263 0016 BFF36F8F 		isb 0xF
 264              	@ 0 "" 2
 265              	.LVL16:
 266              		.thumb
 267              		.syntax unified
 268              	.L10:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269              		.loc 3 935 3 is_stmt 0 view .LVU68
 270              	.LBE45:
 271              	.LBE44:
 272              	.LBE41:
 273              	.LBE40:
 171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 274              		.loc 1 171 1 view .LVU69
 275              		@ sp needed
 276 001a 7047     		bx	lr
 277              	.L13:
 278              		.align	2
 279              	.L12:
 280 001c 00E100E0 		.word	-536813312
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 41


 281              		.cfi_endproc
 282              	.LFE312:
 284              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 285              		.align	1
 286              		.global	HAL_NVIC_SystemReset
 287              		.syntax unified
 288              		.code	16
 289              		.thumb_func
 291              	HAL_NVIC_SystemReset:
 292              	.LFB313:
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Initiate a system reset request to reset the MCU.
 175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 293              		.loc 1 178 1 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ Volatile: function does not return.
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* System Reset */
 180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_SystemReset();
 299              		.loc 1 180 3 view .LVU71
 300              	.LBB52:
 301              	.LBI52:
 861:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 862:Drivers/CMSIS/Include/core_cm0plus.h **** }
 863:Drivers/CMSIS/Include/core_cm0plus.h **** 
 864:Drivers/CMSIS/Include/core_cm0plus.h **** 
 865:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 866:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 867:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 868:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 869:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 870:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 871:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 872:Drivers/CMSIS/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 873:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 874:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 875:Drivers/CMSIS/Include/core_cm0plus.h **** {
 876:Drivers/CMSIS/Include/core_cm0plus.h **** 
 877:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 878:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 879:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 880:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 881:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 882:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 883:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 884:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 885:Drivers/CMSIS/Include/core_cm0plus.h **** }
 886:Drivers/CMSIS/Include/core_cm0plus.h **** 
 887:Drivers/CMSIS/Include/core_cm0plus.h **** 
 888:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 889:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Encode Priority
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 42


 890:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 891:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 892:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 893:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 894:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 895:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 896:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 897:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 898:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 899:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 900:Drivers/CMSIS/Include/core_cm0plus.h **** {
 901:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 902:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 903:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 904:Drivers/CMSIS/Include/core_cm0plus.h **** 
 905:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 906:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 907:Drivers/CMSIS/Include/core_cm0plus.h **** 
 908:Drivers/CMSIS/Include/core_cm0plus.h ****   return (
 909:Drivers/CMSIS/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 910:Drivers/CMSIS/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 911:Drivers/CMSIS/Include/core_cm0plus.h ****          );
 912:Drivers/CMSIS/Include/core_cm0plus.h **** }
 913:Drivers/CMSIS/Include/core_cm0plus.h **** 
 914:Drivers/CMSIS/Include/core_cm0plus.h **** 
 915:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 916:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Decode Priority
 917:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 918:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 919:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 920:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 921:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 922:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 923:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 924:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 925:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 926:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 927:Drivers/CMSIS/Include/core_cm0plus.h **** {
 928:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 929:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 930:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 931:Drivers/CMSIS/Include/core_cm0plus.h **** 
 932:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 933:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 934:Drivers/CMSIS/Include/core_cm0plus.h **** 
 935:Drivers/CMSIS/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 936:Drivers/CMSIS/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 937:Drivers/CMSIS/Include/core_cm0plus.h **** }
 938:Drivers/CMSIS/Include/core_cm0plus.h **** 
 939:Drivers/CMSIS/Include/core_cm0plus.h **** 
 940:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 941:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 942:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 943:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 944:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 945:Drivers/CMSIS/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 946:Drivers/CMSIS/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 43


 947:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 948:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 949:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 950:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 951:Drivers/CMSIS/Include/core_cm0plus.h **** {
 952:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 953:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = SCB->VTOR;
 954:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 955:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = 0x0U;
 956:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 957:Drivers/CMSIS/Include/core_cm0plus.h ****   (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 958:Drivers/CMSIS/Include/core_cm0plus.h ****   /* ARM Application Note 321 states that the M0+ does not require the architectural barrier */
 959:Drivers/CMSIS/Include/core_cm0plus.h **** }
 960:Drivers/CMSIS/Include/core_cm0plus.h **** 
 961:Drivers/CMSIS/Include/core_cm0plus.h **** 
 962:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 963:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 964:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 965:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 966:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 967:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 968:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 969:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 970:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 971:Drivers/CMSIS/Include/core_cm0plus.h **** {
 972:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 973:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = SCB->VTOR;
 974:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 975:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t vectors = 0x0U;
 976:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 977:Drivers/CMSIS/Include/core_cm0plus.h ****   return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4));
 978:Drivers/CMSIS/Include/core_cm0plus.h **** }
 979:Drivers/CMSIS/Include/core_cm0plus.h **** 
 980:Drivers/CMSIS/Include/core_cm0plus.h **** 
 981:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 982:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Reset
 983:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 984:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 985:Drivers/CMSIS/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 302              		.loc 2 985 34 view .LVU72
 303              	.LBB53:
 986:Drivers/CMSIS/Include/core_cm0plus.h **** {
 987:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
 304              		.loc 2 987 3 view .LVU73
 305              	.LBB54:
 306              	.LBI54:
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 307              		.loc 3 944 27 view .LVU74
 308              	.LBB55:
 309              		.loc 3 946 3 view .LVU75
 310              		.syntax divided
 311              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 312 0000 BFF34F8F 		dsb 0xF
 313              	@ 0 "" 2
 314              		.thumb
 315              		.syntax unified
 316              	.LBE55:
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 44


 317              	.LBE54:
 988:Drivers/CMSIS/Include/core_cm0plus.h ****                                                                        buffered write are completed
 989:Drivers/CMSIS/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 318              		.loc 2 989 3 view .LVU76
 319              		.loc 2 989 15 is_stmt 0 view .LVU77
 320 0004 034B     		ldr	r3, .L16
 321 0006 044A     		ldr	r2, .L16+4
 322 0008 DA60     		str	r2, [r3, #12]
 990:Drivers/CMSIS/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 991:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
 323              		.loc 2 991 3 is_stmt 1 view .LVU78
 324              	.LBB56:
 325              	.LBI56:
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 326              		.loc 3 944 27 view .LVU79
 327              	.LBB57:
 328              		.loc 3 946 3 view .LVU80
 329              		.syntax divided
 330              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 331 000a BFF34F8F 		dsb 0xF
 332              	@ 0 "" 2
 333              		.thumb
 334              		.syntax unified
 335              	.L15:
 336              	.LBE57:
 337              	.LBE56:
 992:Drivers/CMSIS/Include/core_cm0plus.h **** 
 993:Drivers/CMSIS/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
 338              		.loc 2 993 3 view .LVU81
 994:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 995:Drivers/CMSIS/Include/core_cm0plus.h ****     __NOP();
 339              		.loc 2 995 5 view .LVU82
 340              		.syntax divided
 341              	@ 995 "Drivers/CMSIS/Include/core_cm0plus.h" 1
 342 000e C046     		nop
 343              	@ 0 "" 2
 993:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 344              		.loc 2 993 8 view .LVU83
 345              		.thumb
 346              		.syntax unified
 347 0010 FDE7     		b	.L15
 348              	.L17:
 349 0012 C046     		.align	2
 350              	.L16:
 351 0014 00ED00E0 		.word	-536810240
 352 0018 0400FA05 		.word	100270084
 353              	.LBE53:
 354              	.LBE52:
 355              		.cfi_endproc
 356              	.LFE313:
 358              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 359              		.align	1
 360              		.global	HAL_SYSTICK_Config
 361              		.syntax unified
 362              		.code	16
 363              		.thumb_func
 365              	HAL_SYSTICK_Config:
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 45


 366              	.LVL17:
 367              	.LFB314:
 181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Initialize the System Timer with interrupt enabled and start the System Tick Timer (Sys
 185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *                  - 1  Function failed.
 189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 368              		.loc 1 191 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   return SysTick_Config(TicksNumb);
 373              		.loc 1 192 3 view .LVU85
 374              	.LBB62:
 375              	.LBI62:
 996:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 997:Drivers/CMSIS/Include/core_cm0plus.h **** }
 998:Drivers/CMSIS/Include/core_cm0plus.h **** 
 999:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_NVICFunctions */
1000:Drivers/CMSIS/Include/core_cm0plus.h **** 
1001:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################  MPU functions  #################################### */
1002:Drivers/CMSIS/Include/core_cm0plus.h **** 
1003:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1004:Drivers/CMSIS/Include/core_cm0plus.h **** 
1005:Drivers/CMSIS/Include/core_cm0plus.h **** #include "mpu_armv7.h"
1006:Drivers/CMSIS/Include/core_cm0plus.h **** 
1007:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
1008:Drivers/CMSIS/Include/core_cm0plus.h **** 
1009:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################  FPU functions  #################################### */
1010:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1011:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1012:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1013:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Function that provides FPU type.
1014:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
1015:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1016:Drivers/CMSIS/Include/core_cm0plus.h **** 
1017:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1018:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   get FPU type
1019:Drivers/CMSIS/Include/core_cm0plus.h ****   \details returns the FPU type
1020:Drivers/CMSIS/Include/core_cm0plus.h ****   \returns
1021:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  0: No FPU
1022:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  1: Single precision FPU
1023:Drivers/CMSIS/Include/core_cm0plus.h ****    - \b  2: Double + Single precision FPU
1024:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1025:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1026:Drivers/CMSIS/Include/core_cm0plus.h **** {
1027:Drivers/CMSIS/Include/core_cm0plus.h ****     return 0U;           /* No FPU */
1028:Drivers/CMSIS/Include/core_cm0plus.h **** }
1029:Drivers/CMSIS/Include/core_cm0plus.h **** 
1030:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 46


1031:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_FpuFunctions */
1032:Drivers/CMSIS/Include/core_cm0plus.h **** 
1033:Drivers/CMSIS/Include/core_cm0plus.h **** 
1034:Drivers/CMSIS/Include/core_cm0plus.h **** 
1035:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##################################    SysTick function  ########################################
1036:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1037:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1038:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1039:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that configure the System.
1040:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
1041:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1042:Drivers/CMSIS/Include/core_cm0plus.h **** 
1043:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1044:Drivers/CMSIS/Include/core_cm0plus.h **** 
1045:Drivers/CMSIS/Include/core_cm0plus.h **** /**
1046:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Tick Configuration
1047:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1048:Drivers/CMSIS/Include/core_cm0plus.h ****            Counter is in free running mode to generate periodic interrupts.
1049:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1050:Drivers/CMSIS/Include/core_cm0plus.h ****   \return          0  Function succeeded.
1051:Drivers/CMSIS/Include/core_cm0plus.h ****   \return          1  Function failed.
1052:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1053:Drivers/CMSIS/Include/core_cm0plus.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1054:Drivers/CMSIS/Include/core_cm0plus.h ****            must contain a vendor-specific implementation of this function.
1055:Drivers/CMSIS/Include/core_cm0plus.h ****  */
1056:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 376              		.loc 2 1056 26 view .LVU86
 377              	.LBB63:
1057:Drivers/CMSIS/Include/core_cm0plus.h **** {
1058:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 378              		.loc 2 1058 3 view .LVU87
 379              		.loc 2 1058 14 is_stmt 0 view .LVU88
 380 0000 0138     		subs	r0, r0, #1
 381              	.LVL18:
 382              		.loc 2 1058 6 view .LVU89
 383 0002 8023     		movs	r3, #128
 384 0004 5B04     		lsls	r3, r3, #17
 385 0006 9842     		cmp	r0, r3
 386 0008 0FD2     		bcs	.L20
1059:Drivers/CMSIS/Include/core_cm0plus.h ****   {
1060:Drivers/CMSIS/Include/core_cm0plus.h ****     return (1UL);                                                   /* Reload value impossible */
1061:Drivers/CMSIS/Include/core_cm0plus.h ****   }
1062:Drivers/CMSIS/Include/core_cm0plus.h **** 
1063:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 387              		.loc 2 1063 3 is_stmt 1 view .LVU90
 388              		.loc 2 1063 18 is_stmt 0 view .LVU91
 389 000a 094A     		ldr	r2, .L21
 390 000c 5060     		str	r0, [r2, #4]
1064:Drivers/CMSIS/Include/core_cm0plus.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 391              		.loc 2 1064 3 is_stmt 1 view .LVU92
 392              	.LVL19:
 393              	.LBB64:
 394              	.LBI64:
 850:Drivers/CMSIS/Include/core_cm0plus.h **** {
 395              		.loc 2 850 22 view .LVU93
 396              	.LBB65:
 852:Drivers/CMSIS/Include/core_cm0plus.h ****   {
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 47


 397              		.loc 2 852 3 view .LVU94
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 398              		.loc 2 859 5 view .LVU95
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 399              		.loc 2 859 52 is_stmt 0 view .LVU96
 400 000e 0948     		ldr	r0, .L21+4
 401              	.LVL20:
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 402              		.loc 2 859 52 view .LVU97
 403 0010 036A     		ldr	r3, [r0, #32]
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 404              		.loc 2 859 33 view .LVU98
 405 0012 1B02     		lsls	r3, r3, #8
 406 0014 1B0A     		lsrs	r3, r3, #8
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 407              		.loc 2 859 102 view .LVU99
 408 0016 C021     		movs	r1, #192
 409 0018 0906     		lsls	r1, r1, #24
 410 001a 0B43     		orrs	r3, r1
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 411              		.loc 2 859 30 view .LVU100
 412 001c 0362     		str	r3, [r0, #32]
 413              	.LVL21:
 859:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 414              		.loc 2 859 30 view .LVU101
 415              	.LBE65:
 416              	.LBE64:
1065:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 417              		.loc 2 1065 3 is_stmt 1 view .LVU102
 418              		.loc 2 1065 18 is_stmt 0 view .LVU103
 419 001e 0023     		movs	r3, #0
 420 0020 9360     		str	r3, [r2, #8]
1066:Drivers/CMSIS/Include/core_cm0plus.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 421              		.loc 2 1066 3 is_stmt 1 view .LVU104
 422              		.loc 2 1066 18 is_stmt 0 view .LVU105
 423 0022 0733     		adds	r3, r3, #7
 424 0024 1360     		str	r3, [r2]
1067:Drivers/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_TICKINT_Msk   |
1068:Drivers/CMSIS/Include/core_cm0plus.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
1069:Drivers/CMSIS/Include/core_cm0plus.h ****   return (0UL);                                                     /* Function successful */
 425              		.loc 2 1069 3 is_stmt 1 view .LVU106
 426              		.loc 2 1069 10 is_stmt 0 view .LVU107
 427 0026 0020     		movs	r0, #0
 428              	.LVL22:
 429              	.L18:
 430              		.loc 2 1069 10 view .LVU108
 431              	.LBE63:
 432              	.LBE62:
 193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 433              		.loc 1 193 1 view .LVU109
 434              		@ sp needed
 435 0028 7047     		bx	lr
 436              	.LVL23:
 437              	.L20:
 438              	.LBB67:
 439              	.LBB66:
1060:Drivers/CMSIS/Include/core_cm0plus.h ****   }
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 48


 440              		.loc 2 1060 12 view .LVU110
 441 002a 0120     		movs	r0, #1
 442              	.LVL24:
1060:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 443              		.loc 2 1060 12 view .LVU111
 444              	.LBE66:
 445              	.LBE67:
 192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 446              		.loc 1 192 10 view .LVU112
 447 002c FCE7     		b	.L18
 448              	.L22:
 449 002e C046     		.align	2
 450              	.L21:
 451 0030 10E000E0 		.word	-536813552
 452 0034 00ED00E0 		.word	-536810240
 453              		.cfi_endproc
 454              	.LFE314:
 456              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 457              		.align	1
 458              		.global	HAL_NVIC_GetPriority
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 463              	HAL_NVIC_GetPriority:
 464              	.LVL25:
 465              	.LFB315:
 194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @}
 196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group2
 199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *  @brief   Cortex control functions
 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****  *
 201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @verbatim
 202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   ==============================================================================
 205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     [..]
 206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****       (NVIC, SYSTICK, MPU) functionalities.
 208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** @endverbatim
 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @{
 212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Get the priority of an interrupt.
 216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 466              		.loc 1 222 1 is_stmt 1 view -0
 467              		.cfi_startproc
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 49


 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		@ link register save eliminated.
 223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 471              		.loc 1 224 3 view .LVU114
 472              	.LBB70:
 473              	.LBI70:
 874:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474              		.loc 2 874 26 view .LVU115
 475              	.LBB71:
 877:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 476              		.loc 2 877 3 view .LVU116
 877:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 477              		.loc 2 877 6 is_stmt 0 view .LVU117
 478 0000 0028     		cmp	r0, #0
 479 0002 0CDB     		blt	.L24
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 480              		.loc 2 879 5 is_stmt 1 view .LVU118
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 481              		.loc 2 879 35 is_stmt 0 view .LVU119
 482 0004 8308     		lsrs	r3, r0, #2
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 483              		.loc 2 879 33 view .LVU120
 484 0006 C033     		adds	r3, r3, #192
 485 0008 9B00     		lsls	r3, r3, #2
 486 000a 0E4A     		ldr	r2, .L26
 487 000c 9B58     		ldr	r3, [r3, r2]
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 488              		.loc 2 879 53 view .LVU121
 489 000e 0322     		movs	r2, #3
 490 0010 1040     		ands	r0, r2
 491              	.LVL26:
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 492              		.loc 2 879 53 view .LVU122
 493 0012 C000     		lsls	r0, r0, #3
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 494              		.loc 2 879 50 view .LVU123
 495 0014 C340     		lsrs	r3, r3, r0
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 496              		.loc 2 879 12 view .LVU124
 497 0016 9B09     		lsrs	r3, r3, #6
 498 0018 0320     		movs	r0, #3
 499 001a 1840     		ands	r0, r3
 500              	.LVL27:
 501              	.L23:
 879:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 502              		.loc 2 879 12 view .LVU125
 503              	.LBE71:
 504              	.LBE70:
 225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 505              		.loc 1 225 1 view .LVU126
 506              		@ sp needed
 507 001c 7047     		bx	lr
 508              	.LVL28:
 509              	.L24:
 510              	.LBB73:
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 50


 511              	.LBB72:
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 512              		.loc 2 883 5 is_stmt 1 view .LVU127
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 513              		.loc 2 883 34 is_stmt 0 view .LVU128
 514 001e 0F23     		movs	r3, #15
 515 0020 0340     		ands	r3, r0
 516 0022 083B     		subs	r3, r3, #8
 517 0024 9B08     		lsrs	r3, r3, #2
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 518              		.loc 2 883 33 view .LVU129
 519 0026 0633     		adds	r3, r3, #6
 520 0028 9B00     		lsls	r3, r3, #2
 521 002a 074A     		ldr	r2, .L26+4
 522 002c 9446     		mov	ip, r2
 523 002e 6344     		add	r3, r3, ip
 524 0030 5B68     		ldr	r3, [r3, #4]
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 525              		.loc 2 883 53 view .LVU130
 526 0032 0322     		movs	r2, #3
 527 0034 1040     		ands	r0, r2
 528              	.LVL29:
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 529              		.loc 2 883 53 view .LVU131
 530 0036 C000     		lsls	r0, r0, #3
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 531              		.loc 2 883 50 view .LVU132
 532 0038 C340     		lsrs	r3, r3, r0
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 533              		.loc 2 883 12 view .LVU133
 534 003a 9B09     		lsrs	r3, r3, #6
 535 003c 0320     		movs	r0, #3
 536 003e 1840     		ands	r0, r3
 537              	.LVL30:
 883:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 538              		.loc 2 883 12 view .LVU134
 539              	.LBE72:
 540              	.LBE73:
 224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 541              		.loc 1 224 10 view .LVU135
 542 0040 ECE7     		b	.L23
 543              	.L27:
 544 0042 C046     		.align	2
 545              	.L26:
 546 0044 00E100E0 		.word	-536813312
 547 0048 00ED00E0 		.word	-536810240
 548              		.cfi_endproc
 549              	.LFE315:
 551              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 552              		.align	1
 553              		.global	HAL_NVIC_SetPendingIRQ
 554              		.syntax unified
 555              		.code	16
 556              		.thumb_func
 558              	HAL_NVIC_SetPendingIRQ:
 559              	.LVL31:
 560              	.LFB316:
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 51


 226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Set Pending bit of an external interrupt.
 229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 561              		.loc 1 235 1 is_stmt 1 view -0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 566              		.loc 1 237 3 view .LVU137
 238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Set interrupt pending */
 240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 567              		.loc 1 240 3 view .LVU138
 568              	.LBB74:
 569              	.LBI74:
 817:Drivers/CMSIS/Include/core_cm0plus.h **** {
 570              		.loc 2 817 22 view .LVU139
 571              	.LBB75:
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 572              		.loc 2 819 3 view .LVU140
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 573              		.loc 2 819 6 is_stmt 0 view .LVU141
 574 0000 0028     		cmp	r0, #0
 575 0002 07DB     		blt	.L28
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 576              		.loc 2 821 5 is_stmt 1 view .LVU142
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 577              		.loc 2 821 58 is_stmt 0 view .LVU143
 578 0004 1F23     		movs	r3, #31
 579 0006 1840     		ands	r0, r3
 580              	.LVL32:
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 581              		.loc 2 821 22 view .LVU144
 582 0008 1E3B     		subs	r3, r3, #30
 583 000a 8340     		lsls	r3, r3, r0
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 584              		.loc 2 821 20 view .LVU145
 585 000c 0249     		ldr	r1, .L30
 586 000e 8022     		movs	r2, #128
 587 0010 5200     		lsls	r2, r2, #1
 588 0012 8B50     		str	r3, [r1, r2]
 589              	.LVL33:
 590              	.L28:
 821:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 591              		.loc 2 821 20 view .LVU146
 592              	.LBE75:
 593              	.LBE74:
 241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 52


 594              		.loc 1 241 1 view .LVU147
 595              		@ sp needed
 596 0014 7047     		bx	lr
 597              	.L31:
 598 0016 C046     		.align	2
 599              	.L30:
 600 0018 00E100E0 		.word	-536813312
 601              		.cfi_endproc
 602              	.LFE316:
 604              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 605              		.align	1
 606              		.global	HAL_NVIC_GetPendingIRQ
 607              		.syntax unified
 608              		.code	16
 609              		.thumb_func
 611              	HAL_NVIC_GetPendingIRQ:
 612              	.LVL34:
 613              	.LFB317:
 242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Get Pending Interrupt (read the pending register in the NVIC
 245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         and return the pending bit for the specified interrupt).
 246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 614              		.loc 1 253 1 is_stmt 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 619              		.loc 1 255 3 view .LVU149
 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 620              		.loc 1 258 3 view .LVU150
 621              	.LBB76:
 622              	.LBI76:
 798:Drivers/CMSIS/Include/core_cm0plus.h **** {
 623              		.loc 2 798 26 view .LVU151
 624              	.LBB77:
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 625              		.loc 2 800 3 view .LVU152
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 626              		.loc 2 800 6 is_stmt 0 view .LVU153
 627 0000 0028     		cmp	r0, #0
 628 0002 09DB     		blt	.L34
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 629              		.loc 2 802 5 is_stmt 1 view .LVU154
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 630              		.loc 2 802 35 is_stmt 0 view .LVU155
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 53


 631 0004 054A     		ldr	r2, .L35
 632 0006 8023     		movs	r3, #128
 633 0008 5B00     		lsls	r3, r3, #1
 634 000a D358     		ldr	r3, [r2, r3]
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 635              		.loc 2 802 68 view .LVU156
 636 000c 1F22     		movs	r2, #31
 637 000e 1040     		ands	r0, r2
 638              	.LVL35:
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 639              		.loc 2 802 80 view .LVU157
 640 0010 C340     		lsrs	r3, r3, r0
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 641              		.loc 2 802 12 view .LVU158
 642 0012 0120     		movs	r0, #1
 643 0014 1840     		ands	r0, r3
 644              	.LVL36:
 645              	.L32:
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 646              		.loc 2 802 12 view .LVU159
 647              	.LBE77:
 648              	.LBE76:
 259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 649              		.loc 1 259 1 view .LVU160
 650              		@ sp needed
 651 0016 7047     		bx	lr
 652              	.LVL37:
 653              	.L34:
 654              	.LBB79:
 655              	.LBB78:
 806:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 656              		.loc 2 806 11 view .LVU161
 657 0018 0020     		movs	r0, #0
 658              	.LVL38:
 806:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 659              		.loc 2 806 11 view .LVU162
 660              	.LBE78:
 661              	.LBE79:
 258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 662              		.loc 1 258 10 view .LVU163
 663 001a FCE7     		b	.L32
 664              	.L36:
 665              		.align	2
 666              	.L35:
 667 001c 00E100E0 		.word	-536813312
 668              		.cfi_endproc
 669              	.LFE317:
 671              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 672              		.align	1
 673              		.global	HAL_NVIC_ClearPendingIRQ
 674              		.syntax unified
 675              		.code	16
 676              		.thumb_func
 678              	HAL_NVIC_ClearPendingIRQ:
 679              	.LVL39:
 680              	.LFB318:
 260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 54


 261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Clear the pending bit of an external interrupt.
 263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 681              		.loc 1 269 1 is_stmt 1 view -0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 686              		.loc 1 271 3 view .LVU165
 272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Clear pending interrupt */
 274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 687              		.loc 1 274 3 view .LVU166
 688              	.LBB80:
 689              	.LBI80:
 832:Drivers/CMSIS/Include/core_cm0plus.h **** {
 690              		.loc 2 832 22 view .LVU167
 691              	.LBB81:
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 692              		.loc 2 834 3 view .LVU168
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 693              		.loc 2 834 6 is_stmt 0 view .LVU169
 694 0000 0028     		cmp	r0, #0
 695 0002 07DB     		blt	.L37
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 696              		.loc 2 836 5 is_stmt 1 view .LVU170
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 697              		.loc 2 836 58 is_stmt 0 view .LVU171
 698 0004 1F23     		movs	r3, #31
 699 0006 1840     		ands	r0, r3
 700              	.LVL40:
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 701              		.loc 2 836 22 view .LVU172
 702 0008 1E3B     		subs	r3, r3, #30
 703 000a 8340     		lsls	r3, r3, r0
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 704              		.loc 2 836 20 view .LVU173
 705 000c 0249     		ldr	r1, .L39
 706 000e C022     		movs	r2, #192
 707 0010 5200     		lsls	r2, r2, #1
 708 0012 8B50     		str	r3, [r1, r2]
 709              	.LVL41:
 710              	.L37:
 836:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 711              		.loc 2 836 20 view .LVU174
 712              	.LBE81:
 713              	.LBE80:
 275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 714              		.loc 1 275 1 view .LVU175
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 55


 715              		@ sp needed
 716 0014 7047     		bx	lr
 717              	.L40:
 718 0016 C046     		.align	2
 719              	.L39:
 720 0018 00E100E0 		.word	-536813312
 721              		.cfi_endproc
 722              	.LFE318:
 724              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 725              		.align	1
 726              		.global	HAL_SYSTICK_CLKSourceConfig
 727              		.syntax unified
 728              		.code	16
 729              		.thumb_func
 731              	HAL_SYSTICK_CLKSourceConfig:
 732              	.LVL42:
 733              	.LFB319:
 276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Configure the SysTick clock source.
 279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param CLKSource specifies the SysTick clock source.
 280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 734              		.loc 1 286 1 is_stmt 1 view -0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 0
 737              		@ frame_needed = 0, uses_anonymous_args = 0
 738              		@ link register save eliminated.
 287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 739              		.loc 1 288 3 view .LVU177
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 740              		.loc 1 289 3 view .LVU178
 741              		.loc 1 289 6 is_stmt 0 view .LVU179
 742 0000 0428     		cmp	r0, #4
 743 0002 05D0     		beq	.L44
 290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   {
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   else
 294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   {
 295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 744              		.loc 1 295 5 is_stmt 1 view .LVU180
 745              		.loc 1 295 19 is_stmt 0 view .LVU181
 746 0004 054A     		ldr	r2, .L45
 747 0006 1368     		ldr	r3, [r2]
 748 0008 0421     		movs	r1, #4
 749 000a 8B43     		bics	r3, r1
 750 000c 1360     		str	r3, [r2]
 751              	.L41:
 296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 56


 752              		.loc 1 297 1 view .LVU182
 753              		@ sp needed
 754 000e 7047     		bx	lr
 755              	.L44:
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 756              		.loc 1 291 5 is_stmt 1 view .LVU183
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   }
 757              		.loc 1 291 19 is_stmt 0 view .LVU184
 758 0010 024A     		ldr	r2, .L45
 759 0012 1368     		ldr	r3, [r2]
 760 0014 0421     		movs	r1, #4
 761 0016 0B43     		orrs	r3, r1
 762 0018 1360     		str	r3, [r2]
 763 001a F8E7     		b	.L41
 764              	.L46:
 765              		.align	2
 766              	.L45:
 767 001c 10E000E0 		.word	-536813552
 768              		.cfi_endproc
 769              	.LFE319:
 771              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 772              		.align	1
 773              		.weak	HAL_SYSTICK_Callback
 774              		.syntax unified
 775              		.code	16
 776              		.thumb_func
 778              	HAL_SYSTICK_Callback:
 779              	.LFB321:
 298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Handle SYSTICK interrupt request.
 301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 780              		.loc 1 313 1 is_stmt 1 view -0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****    */
 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 785              		.loc 1 317 1 view .LVU186
 786              		@ sp needed
 787 0000 7047     		bx	lr
 788              		.cfi_endproc
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 57


 789              	.LFE321:
 791              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 792              		.align	1
 793              		.global	HAL_SYSTICK_IRQHandler
 794              		.syntax unified
 795              		.code	16
 796              		.thumb_func
 798              	HAL_SYSTICK_IRQHandler:
 799              	.LFB320:
 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 800              		.loc 1 304 1 view -0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804 0000 10B5     		push	{r4, lr}
 805              	.LCFI1:
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 4, -8
 808              		.cfi_offset 14, -4
 305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 809              		.loc 1 305 3 view .LVU188
 810 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 811              	.LVL43:
 306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 812              		.loc 1 306 1 is_stmt 0 view .LVU189
 813              		@ sp needed
 814 0006 10BD     		pop	{r4, pc}
 815              		.cfi_endproc
 816              	.LFE320:
 818              		.section	.text.HAL_MPU_Enable,"ax",%progbits
 819              		.align	1
 820              		.global	HAL_MPU_Enable
 821              		.syntax unified
 822              		.code	16
 823              		.thumb_func
 825              	HAL_MPU_Enable:
 826              	.LVL44:
 827              	.LFB322:
 318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** #if (__MPU_PRESENT == 1U)
 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Enable the MPU.
 322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param  MPU_Control Specifies the control mode of the MPU during hard fault,
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged access to the default memory
 324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 828              		.loc 1 332 1 is_stmt 1 view -0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 58


 832              		@ link register save eliminated.
 333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Enable the MPU */
 334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 833              		.loc 1 334 3 view .LVU191
 834              		.loc 1 334 28 is_stmt 0 view .LVU192
 835 0000 0123     		movs	r3, #1
 836 0002 1843     		orrs	r0, r3
 837              	.LVL45:
 838              		.loc 1 334 13 view .LVU193
 839 0004 034B     		ldr	r3, .L50
 840 0006 5860     		str	r0, [r3, #4]
 335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Ensure MPU setting take effects */
 337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   __DSB();
 841              		.loc 1 337 3 is_stmt 1 view .LVU194
 842              	.LBB82:
 843              	.LBI82:
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 844              		.loc 3 944 27 view .LVU195
 845              	.LBB83:
 846              		.loc 3 946 3 view .LVU196
 847              		.syntax divided
 848              	@ 946 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 849 0008 BFF34F8F 		dsb 0xF
 850              	@ 0 "" 2
 851              		.thumb
 852              		.syntax unified
 853              	.LBE83:
 854              	.LBE82:
 338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   __ISB();
 855              		.loc 1 338 3 view .LVU197
 856              	.LBB84:
 857              	.LBI84:
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 858              		.loc 3 933 27 view .LVU198
 859              	.LBB85:
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 860              		.loc 3 935 3 view .LVU199
 861              		.syntax divided
 862              	@ 935 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 863 000c BFF36F8F 		isb 0xF
 864              	@ 0 "" 2
 865              		.thumb
 866              		.syntax unified
 867              	.LBE85:
 868              	.LBE84:
 339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 869              		.loc 1 339 1 is_stmt 0 view .LVU200
 870              		@ sp needed
 871 0010 7047     		bx	lr
 872              	.L51:
 873 0012 C046     		.align	2
 874              	.L50:
 875 0014 90ED00E0 		.word	-536810096
 876              		.cfi_endproc
 877              	.LFE322:
 879              		.section	.text.HAL_MPU_Disable,"ax",%progbits
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 59


 880              		.align	1
 881              		.global	HAL_MPU_Disable
 882              		.syntax unified
 883              		.code	16
 884              		.thumb_func
 886              	HAL_MPU_Disable:
 887              	.LFB323:
 340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Disable the MPU.
 344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 888              		.loc 1 347 1 is_stmt 1 view -0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 892              		@ link register save eliminated.
 348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Make sure outstanding transfers are done */
 349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   __DMB();
 893              		.loc 1 349 3 view .LVU202
 894              	.LBB86:
 895              	.LBI86:
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 896              		.loc 3 955 27 view .LVU203
 897              	.LBB87:
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 898              		.loc 3 957 3 view .LVU204
 899              		.syntax divided
 900              	@ 957 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 901 0000 BFF35F8F 		dmb 0xF
 902              	@ 0 "" 2
 903              		.thumb
 904              		.syntax unified
 905              	.LBE87:
 906              	.LBE86:
 350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Disable the MPU and clear the control register*/
 352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->CTRL  = 0;
 907              		.loc 1 352 3 view .LVU205
 908              		.loc 1 352 14 is_stmt 0 view .LVU206
 909 0004 014B     		ldr	r3, .L53
 910 0006 0022     		movs	r2, #0
 911 0008 5A60     		str	r2, [r3, #4]
 353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 912              		.loc 1 353 1 view .LVU207
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 60


 913              		@ sp needed
 914 000a 7047     		bx	lr
 915              	.L54:
 916              		.align	2
 917              	.L53:
 918 000c 90ED00E0 		.word	-536810096
 919              		.cfi_endproc
 920              	.LFE323:
 922              		.section	.text.HAL_MPU_EnableRegion,"ax",%progbits
 923              		.align	1
 924              		.global	HAL_MPU_EnableRegion
 925              		.syntax unified
 926              		.code	16
 927              		.thumb_func
 929              	HAL_MPU_EnableRegion:
 930              	.LVL46:
 931              	.LFB324:
 354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Enable the MPU Region.
 357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_EnableRegion(uint32_t RegionNumber)
 360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 932              		.loc 1 360 1 is_stmt 1 view -0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              		@ link register save eliminated.
 361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(RegionNumber));
 937              		.loc 1 362 3 view .LVU209
 363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Set the Region number */
 365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->RNR = RegionNumber;
 938              		.loc 1 365 3 view .LVU210
 939              		.loc 1 365 12 is_stmt 0 view .LVU211
 940 0000 034B     		ldr	r3, .L56
 941 0002 9860     		str	r0, [r3, #8]
 366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Enable the Region */
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   SET_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 942              		.loc 1 368 3 is_stmt 1 view .LVU212
 943 0004 1A69     		ldr	r2, [r3, #16]
 944 0006 0121     		movs	r1, #1
 945 0008 0A43     		orrs	r2, r1
 946 000a 1A61     		str	r2, [r3, #16]
 369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 947              		.loc 1 369 1 is_stmt 0 view .LVU213
 948              		@ sp needed
 949 000c 7047     		bx	lr
 950              	.L57:
 951 000e C046     		.align	2
 952              	.L56:
 953 0010 90ED00E0 		.word	-536810096
 954              		.cfi_endproc
 955              	.LFE324:
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 61


 957              		.section	.text.HAL_MPU_DisableRegion,"ax",%progbits
 958              		.align	1
 959              		.global	HAL_MPU_DisableRegion
 960              		.syntax unified
 961              		.code	16
 962              		.thumb_func
 964              	HAL_MPU_DisableRegion:
 965              	.LVL47:
 966              	.LFB325:
 370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Disable the MPU Region.
 373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_DisableRegion(uint32_t RegionNumber)
 376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 967              		.loc 1 376 1 is_stmt 1 view -0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              		@ link register save eliminated.
 377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(RegionNumber));
 972              		.loc 1 378 3 view .LVU215
 379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Set the Region number */
 381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->RNR = RegionNumber;
 973              		.loc 1 381 3 view .LVU216
 974              		.loc 1 381 12 is_stmt 0 view .LVU217
 975 0000 034B     		ldr	r3, .L59
 976 0002 9860     		str	r0, [r3, #8]
 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Disable the Region */
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 977              		.loc 1 384 3 is_stmt 1 view .LVU218
 978 0004 1A69     		ldr	r2, [r3, #16]
 979 0006 0121     		movs	r1, #1
 980 0008 8A43     		bics	r2, r1
 981 000a 1A61     		str	r2, [r3, #16]
 385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 982              		.loc 1 385 1 is_stmt 0 view .LVU219
 983              		@ sp needed
 984 000c 7047     		bx	lr
 985              	.L60:
 986 000e C046     		.align	2
 987              	.L59:
 988 0010 90ED00E0 		.word	-536810096
 989              		.cfi_endproc
 990              	.LFE325:
 992              		.section	.text.HAL_MPU_ConfigRegion,"ax",%progbits
 993              		.align	1
 994              		.global	HAL_MPU_ConfigRegion
 995              		.syntax unified
 996              		.code	16
 997              		.thumb_func
 999              	HAL_MPU_ConfigRegion:
 1000              	.LVL48:
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 62


 1001              	.LFB326:
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** /**
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @brief  Initialize and configure the Region and the memory to be protected.
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
 390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   *                the initialization and configuration information.
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   * @retval None
 392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   */
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** {
 1002              		.loc 1 394 1 is_stmt 1 view -0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Check the parameters */
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 1007              		.loc 1 396 3 view .LVU221
 397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 1008              		.loc 1 397 3 view .LVU222
 398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 1009              		.loc 1 398 3 view .LVU223
 399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 1010              		.loc 1 399 3 view .LVU224
 400:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 1011              		.loc 1 400 3 view .LVU225
 401:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 1012              		.loc 1 401 3 view .LVU226
 402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 1013              		.loc 1 402 3 view .LVU227
 403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 1014              		.loc 1 403 3 view .LVU228
 404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 1015              		.loc 1 404 3 view .LVU229
 405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 1016              		.loc 1 405 3 view .LVU230
 406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Set the Region number */
 407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 1017              		.loc 1 407 3 view .LVU231
 1018              		.loc 1 407 22 is_stmt 0 view .LVU232
 1019 0000 4378     		ldrb	r3, [r0, #1]
 1020              		.loc 1 407 12 view .LVU233
 1021 0002 114A     		ldr	r2, .L62
 1022 0004 9360     		str	r3, [r2, #8]
 408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****     /* Disable the Region */
 410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 1023              		.loc 1 410 3 is_stmt 1 view .LVU234
 1024 0006 1369     		ldr	r3, [r2, #16]
 1025 0008 0121     		movs	r1, #1
 1026 000a 8B43     		bics	r3, r1
 1027 000c 1361     		str	r3, [r2, #16]
 411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   /* Apply configuration */
 413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->RBAR = MPU_Init->BaseAddress;
 1028              		.loc 1 413 3 view .LVU235
 1029              		.loc 1 413 13 is_stmt 0 view .LVU236
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 63


 1030 000e 4368     		ldr	r3, [r0, #4]
 1031 0010 D360     		str	r3, [r2, #12]
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 1032              		.loc 1 414 3 is_stmt 1 view .LVU237
 1033              		.loc 1 414 34 is_stmt 0 view .LVU238
 1034 0012 037B     		ldrb	r3, [r0, #12]
 1035              		.loc 1 414 60 view .LVU239
 1036 0014 1B07     		lsls	r3, r3, #28
 415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 1037              		.loc 1 415 34 view .LVU240
 1038 0016 C17A     		ldrb	r1, [r0, #11]
 1039              		.loc 1 415 60 view .LVU241
 1040 0018 0906     		lsls	r1, r1, #24
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****   MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 1041              		.loc 1 414 82 view .LVU242
 1042 001a 0B43     		orrs	r3, r1
 416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 1043              		.loc 1 416 34 view .LVU243
 1044 001c 817A     		ldrb	r1, [r0, #10]
 1045              		.loc 1 416 60 view .LVU244
 1046 001e C904     		lsls	r1, r1, #19
 415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 1047              		.loc 1 415 82 view .LVU245
 1048 0020 0B43     		orrs	r3, r1
 417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 1049              		.loc 1 417 34 view .LVU246
 1050 0022 417B     		ldrb	r1, [r0, #13]
 1051              		.loc 1 417 60 view .LVU247
 1052 0024 8904     		lsls	r1, r1, #18
 416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 1053              		.loc 1 416 82 view .LVU248
 1054 0026 0B43     		orrs	r3, r1
 418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 1055              		.loc 1 418 34 view .LVU249
 1056 0028 817B     		ldrb	r1, [r0, #14]
 1057              		.loc 1 418 60 view .LVU250
 1058 002a 4904     		lsls	r1, r1, #17
 417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 1059              		.loc 1 417 82 view .LVU251
 1060 002c 0B43     		orrs	r3, r1
 419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 1061              		.loc 1 419 34 view .LVU252
 1062 002e C17B     		ldrb	r1, [r0, #15]
 1063              		.loc 1 419 60 view .LVU253
 1064 0030 0904     		lsls	r1, r1, #16
 418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 1065              		.loc 1 418 82 view .LVU254
 1066 0032 0B43     		orrs	r3, r1
 420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 1067              		.loc 1 420 34 view .LVU255
 1068 0034 417A     		ldrb	r1, [r0, #9]
 1069              		.loc 1 420 60 view .LVU256
 1070 0036 0902     		lsls	r1, r1, #8
 419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 1071              		.loc 1 419 82 view .LVU257
 1072 0038 0B43     		orrs	r3, r1
 421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 64


 1073              		.loc 1 421 34 view .LVU258
 1074 003a 017A     		ldrb	r1, [r0, #8]
 1075              		.loc 1 421 60 view .LVU259
 1076 003c 4900     		lsls	r1, r1, #1
 420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 1077              		.loc 1 420 82 view .LVU260
 1078 003e 0B43     		orrs	r3, r1
 422:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 1079              		.loc 1 422 34 view .LVU261
 1080 0040 0178     		ldrb	r1, [r0]
 421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 1081              		.loc 1 421 82 view .LVU262
 1082 0042 0B43     		orrs	r3, r1
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c ****               ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 1083              		.loc 1 414 13 view .LVU263
 1084 0044 1361     		str	r3, [r2, #16]
 423:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** 
 424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c **** }
 1085              		.loc 1 424 1 view .LVU264
 1086              		@ sp needed
 1087 0046 7047     		bx	lr
 1088              	.L63:
 1089              		.align	2
 1090              	.L62:
 1091 0048 90ED00E0 		.word	-536810096
 1092              		.cfi_endproc
 1093              	.LFE326:
 1095              		.text
 1096              	.Letext0:
 1097              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g070xx.h"
 1098              		.file 5 "c:\\dev\\tools\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\machine\\_default
 1099              		.file 6 "c:\\dev\\tools\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 1100              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_cortex.h"
 1101              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
ARM GAS  C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s 			page 65


DEFINED SYMBOLS
                            *ABS*:00000000 stm32g0xx_hal_cortex.c
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:18     .text.HAL_NVIC_SetPriority:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:24     .text.HAL_NVIC_SetPriority:00000000 HAL_NVIC_SetPriority
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:145    .text.HAL_NVIC_SetPriority:00000058 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:151    .text.HAL_NVIC_EnableIRQ:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:157    .text.HAL_NVIC_EnableIRQ:00000000 HAL_NVIC_EnableIRQ
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:199    .text.HAL_NVIC_EnableIRQ:00000014 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:204    .text.HAL_NVIC_DisableIRQ:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:210    .text.HAL_NVIC_DisableIRQ:00000000 HAL_NVIC_DisableIRQ
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:280    .text.HAL_NVIC_DisableIRQ:0000001c $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:285    .text.HAL_NVIC_SystemReset:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:291    .text.HAL_NVIC_SystemReset:00000000 HAL_NVIC_SystemReset
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:351    .text.HAL_NVIC_SystemReset:00000014 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:359    .text.HAL_SYSTICK_Config:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:365    .text.HAL_SYSTICK_Config:00000000 HAL_SYSTICK_Config
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:451    .text.HAL_SYSTICK_Config:00000030 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:457    .text.HAL_NVIC_GetPriority:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:463    .text.HAL_NVIC_GetPriority:00000000 HAL_NVIC_GetPriority
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:546    .text.HAL_NVIC_GetPriority:00000044 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:552    .text.HAL_NVIC_SetPendingIRQ:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:558    .text.HAL_NVIC_SetPendingIRQ:00000000 HAL_NVIC_SetPendingIRQ
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:600    .text.HAL_NVIC_SetPendingIRQ:00000018 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:605    .text.HAL_NVIC_GetPendingIRQ:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:611    .text.HAL_NVIC_GetPendingIRQ:00000000 HAL_NVIC_GetPendingIRQ
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:667    .text.HAL_NVIC_GetPendingIRQ:0000001c $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:672    .text.HAL_NVIC_ClearPendingIRQ:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:678    .text.HAL_NVIC_ClearPendingIRQ:00000000 HAL_NVIC_ClearPendingIRQ
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:720    .text.HAL_NVIC_ClearPendingIRQ:00000018 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:725    .text.HAL_SYSTICK_CLKSourceConfig:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:731    .text.HAL_SYSTICK_CLKSourceConfig:00000000 HAL_SYSTICK_CLKSourceConfig
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:767    .text.HAL_SYSTICK_CLKSourceConfig:0000001c $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:772    .text.HAL_SYSTICK_Callback:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:778    .text.HAL_SYSTICK_Callback:00000000 HAL_SYSTICK_Callback
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:792    .text.HAL_SYSTICK_IRQHandler:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:798    .text.HAL_SYSTICK_IRQHandler:00000000 HAL_SYSTICK_IRQHandler
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:819    .text.HAL_MPU_Enable:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:825    .text.HAL_MPU_Enable:00000000 HAL_MPU_Enable
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:875    .text.HAL_MPU_Enable:00000014 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:880    .text.HAL_MPU_Disable:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:886    .text.HAL_MPU_Disable:00000000 HAL_MPU_Disable
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:918    .text.HAL_MPU_Disable:0000000c $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:923    .text.HAL_MPU_EnableRegion:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:929    .text.HAL_MPU_EnableRegion:00000000 HAL_MPU_EnableRegion
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:953    .text.HAL_MPU_EnableRegion:00000010 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:958    .text.HAL_MPU_DisableRegion:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:964    .text.HAL_MPU_DisableRegion:00000000 HAL_MPU_DisableRegion
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:988    .text.HAL_MPU_DisableRegion:00000010 $d
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:993    .text.HAL_MPU_ConfigRegion:00000000 $t
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:999    .text.HAL_MPU_ConfigRegion:00000000 HAL_MPU_ConfigRegion
C:\Users\tugru\AppData\Local\Temp\ccipn7Xg.s:1091   .text.HAL_MPU_ConfigRegion:00000048 $d

NO UNDEFINED SYMBOLS
